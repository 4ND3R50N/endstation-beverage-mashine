openapi: "3.0.0"
info:
  title: Endstation beverage machine API
  description: This api handles beverage machine data. It provides possibilities to create drinks and is communicating with the baverage machine itself to apply data or trigger drinks.
  version: 0.0.1

# todos:
# - Rework create endpoints to insert multiple data, not just 1 at a time
servers:
  - url: '{protocol}://127.0.0.1:{port}/api/v1'
    description: Local Host example
    variables:
      port:
        enum:
          - '8080'
        default: '8080'
      protocol:
        enum:
          - http
          - https
        default: http
paths:
  /drinks/ingredient:
    post:
      summary: "Use this endpoint to create an ingredient"
      tags:
        - Ingredient Management
      operationId: createIngredient
      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientData'
      responses:
        '201':
          description: Ingredient got successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientResponse'
        '409':
          description: Ingredient already existed
    get:
      summary: "Use this endpoint to get all Ingredients. Later, this endpoint will supports query parameters for filtering"
      tags:
        - Ingredient Management
      operationId: getIngredients
      responses:
        '200':
          description: Ingredients got found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientDataList'
  /drinks/ingredient/{ingredientId}:
    post:
      summary: "Use this endpoint to update an ingredient"
      tags:
        - Ingredient Management
      operationId: updateIngredient
      parameters:
        - name: ingredientId
          in: path
          description: Ingredient Id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientData'
      responses:
        '204':
          description: Ingredient got successfuly updated
        '404':
          description: Ingredient cant be found
    get:
      summary: "Use this endpoint to get an ingredient by id"
      tags:
        - Ingredient Management
      operationId: getIngredient
      parameters:
        - name: ingredientId
          in: path
          description: Ingredient Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ingredient got successfuly fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngredientData'
        '404':
          description: Ingredient cant be found
    delete:
      summary: "Use this endpoint to delete an ingredient by id"
      tags:
        - Ingredient Management
      operationId: deleteIngredient
      parameters:
        - name: ingredientId
          in: path
          description: Ingredient Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Ingredient got successfuly deleted
        '404':
          description: Ingredient cant be found
  /drinks:
    post:
      summary: "Use this endpoint to create a drink"
      tags:
        - Drink Management
      operationId: createDrink
      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrinkData'
      responses:
        '201':
          description: Drink got successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrinkDataResponse'
    get:
      summary: "Use this endpoint to get all drinks.  Later, this endpoint will supports query parameters for filtering"
      tags:
        - Drink Management
      operationId: getDrinks
      responses:
        '200':
          description: Drink got successfuly fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrinkDataList'
        '404':
          description: Drink cant be found
  /drinks/{drinkId}:
    post:
      summary: "Use this endpoint to update a drink"
      tags:
        - Drink Management
      operationId: updateDrink
      parameters:
        - name: drinkId
          in: path
          description: Drink Id
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DrinkData'
      responses:
        '204':
          description: Drink got successfuly updated
        '404':
          description: Drink cant be found
    get:
      summary: "Use this endpoint to get a drink by id"
      tags:
        - Drink Management
      operationId: getDrink
      parameters:
        - name: drinkId
          in: path
          description: Drink Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Drink got found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrinkData'
        '404':
          description: Ingredient cant be found
    delete:
      summary: "Use this endpoint to delete a drink by id"
      tags:
        - Drink Management
      operationId: deleteDrink
      parameters:
        - name: drinkId
          in: path
          description: Drink Id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Drink got deleted
        '404':
          description: Drink cant be found

  /beverage-machine/ingredients:
    post:
      summary: "Use this endpoint to tell the machine which slots contains which Ingredients"
      tags:
        - Machine Interactions
      operationId: setSlots
      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineIngredientsRequest'
      responses:
        '201':
          description: Set ingredient slot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineIngredientsResponse'
        '404':
          description: Slot or ingredient not found
    get:
      summary: "Get all current Ingredient slots"
      tags:
        - Machine Interactions
      operationId: getSlots
      responses:
        '200':
          description: Get all current Ingredients slots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineIngredientsResponse'
  /beverage-machine/mix:
    post:
      summary: "Use this endpoint trigger the mixing with a specific drink receipt"
      tags:
        - Machine Interactions
      operationId: mix
      requestBody:
        description: It is required to send the following request
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineMixRequest'
      responses:
        '200':
          description: Drink mixing in progress
        '404':
          description: Machine is not reachable
        '409':
          description: There is already mixing in progress
components:
  schemas:
    IngredientDataList:
      type: array
      items:
        $ref: '#/components/schemas/IngredientData'
    IngredientData:
      required:
        - name
        - liquidType
      properties:
        ingredientId:
          type: integer
          format: int64
          nullable: true
          description: "unique id of the ingredient, this is not necessary!"
        name:
          type: string
        liquidType:
          type: string
          enum: [ALCOHOL, SOFTDRINK]
    IngredientResponse:
      required:
        - ingredientId
      properties:
        ingredientId:
          type: integer
          format: int64
          description: "unique id of the ingredient"
    DrinkDataList:
      type: array
      items:
        $ref: '#/components/schemas/DrinkData'
    DrinkData:
      required:
        - name
        - ingredients
        - isBasicDrink
      properties:
        drinkId:
          type: integer
          format: int64
          nullable: true
          description: "unique id of the ingredient, this is not necessary!"
        name:
          type: string
          description: "name of the drink"
        isBasicDrink:
          type: boolean
          description: "this field indicates if this drink is a standard drink, from which other visitors can create different mix- variants."
        visitorId:
          type: string
          description: "the visitor who created this drink. It is not required to link drinks with visitors yet."
          example: 64441396-d665-4b91-9924-84c87b5f48ce
        ingredients:
          type: array
          description: "list of Ingredients with exact amount of quantity"
          items:
            $ref: '#/components/schemas/DrinkIngredient'
    DrinkDataForMachine:
      required:
        - ingredients
      properties:
        ingredients:
          type: array
          description: "list of Ingredients with exact amount of quantity"
          items:
            $ref: '#/components/schemas/DrinkIngredient'
    DrinkIngredient:
      required:
        - ingredientId
        - amount
        - quantityType
      properties:
        ingredientId:
          type: integer
          format: int64
          description: "unique id of the ingredient"
        amount:
          type: number
          description: "this attribute combined with the unit is handling the quantity of the ingredient in the drink"
        quantityType:
          type: string
          description: "unit for the amount"
          enum: [CL]
    DrinkDataResponse:
      required:
        - drinkId
      properties:
        drinkId:
          type: integer
          format: int64
          description: "unique id of the drink"
    MachineIngredientsRequest:
      required:
        - slotId
        - ingredientId
      properties:
        slotId:
          type: number
          minimum: 1
          maximum: 6
          description: "bottle slot"
        ingredientId:
          type: number
          description: "Ingredient id"
    MachineIngredientsResponse:
      type: array
      description: "all current slots ids related to the current Ingredientss"
      items:
        $ref: '#/components/schemas/BottleSlots'
    BottleSlots:
      required:
        - slotId
        - ingredientId
      properties:
          slotId:
            type: integer
            format: int64
            description: "bottle slot"
          ingredientId:
            description: "Ingredient id"
            type: integer
            format: int64
    MachineMixRequest:
      required:
        - visitorId
        - drink
      properties:
        visitorId:
          type: string
          example: 64441396-d665-4b91-9924-84c87b5f48ce
        drink:
          $ref: '#/components/schemas/DrinkDataForMachine'
